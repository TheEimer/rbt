hydra:
  run:
    dir: evaluation/${hpo_method}/${algorithm}_${environment.name}/${autorl.seed}
  sweep:
    dir: evaluation/${hpo_method}/${algorithm}_${environment.name}/${autorl.seed}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - autorl.seed=100
    - +incumbent=glob(*)
  job:
    name: run_arlbench
    chdir: true
    override_dirname: +incumbent=glob(*),autorl.seed=100
    id: ???
    num: ???
    config_name: evaluate
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /Users/jannisbecktepe/Developer/arlbench_main/examples
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /Users/jannisbecktepe/Developer/arlbench_main/examples/configs
      schema: file
      provider: main
    - path: hydra_plugins.hydra_colorlog.conf
      schema: pkg
      provider: hydra-colorlog
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      environment: cc_cartpole
      algorithm: dqn
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
jax_enable_x64: true
load_checkpoint: ''
hpo_method: default_method
autorl:
  seed: 100
  env_framework: ${environment.framework}
  env_name: ${environment.name}
  env_kwargs: ${environment.kwargs}
  eval_env_kwargs: ${environment.eval_kwargs}
  n_envs: ${environment.n_envs}
  algorithm: ${algorithm}
  cnn_policy: ${environment.cnn_policy}
  nas_config: ${nas_config}
  n_total_timesteps: ${environment.n_total_timesteps}
  checkpoint: []
  checkpoint_name: default_checkpoint
  checkpoint_dir: /tmp
  state_features: []
  objectives:
  - reward_mean
  optimize_objectives: upper
  n_steps: 1
  n_eval_steps: 100
  n_eval_episodes: 10
algorithm: dqn
hp_config:
  buffer_prio_sampling: false
  buffer_alpha: 0.9
  buffer_beta: 0.9
  buffer_epsilon: 0.001
  buffer_batch_size: 16
  buffer_size: 1000000
  initial_epsilon: 1.0
  target_epsilon: 0.05
  gamma: 0.99
  gradient_steps: 1
  learning_rate: 0.0003
  learning_starts: 128
  normalize_observations: false
  train_freq: 4
  use_target_network: true
  target_update_interval: 1000
  tau: 1.0
nas_config:
  activation: tanh
  hidden_size: 64
environment:
  name: CartPole-v1
  framework: gymnax
  n_total_timesteps: 100000.0
  kwargs: {}
  eval_kwargs: {}
  cnn_policy: false
  deterministic_eval: true
  n_envs: 8
